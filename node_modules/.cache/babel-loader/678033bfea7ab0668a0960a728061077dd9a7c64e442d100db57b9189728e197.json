{"ast":null,"code":"import wordFreqData from '../assets/five_letter_possible_words.json';\nimport maxHeap from '../ds/maxheap';\nvar wordSpace = [];\nvar P = 0.00043308791684711995;\nfor (const word in wordFreqData) {\n  wordSpace.push(word);\n}\nfunction log2(x) {\n  return Math.log2(x);\n}\nfunction filterWordSpace(wordData) {\n  const greenLetters = [];\n  const grayLetters = [];\n  const yellowLetters = [];\n  for (let i = 0; i < 5; i++) {\n    if (wordData[i][0] === 'green') {\n      greenLetters.push([wordData[i][1], i]);\n    } else if (wordData[i][0] === 'gray') {\n      grayLetters.push(wordData[i][1]);\n    } else {\n      yellowLetters.push([wordData[i][1], i]);\n    }\n  }\n  var updatedWordSpace = [];\n  for (let word of wordSpace) {\n    var ok = true;\n    var exclusionListForGray = [];\n    for (let gl of greenLetters) {\n      if (word[gl[1]] !== gl[0]) {\n        ok = false;\n        break;\n      }\n      exclusionListForGray.push(gl[0]);\n    }\n    for (let e of yellowLetters) {\n      let j = word.indexOf(e[0]);\n      if (j === -1) {\n        ok = false;\n        break;\n      }\n      if (j === e[1]) {\n        ok = false;\n        break;\n      }\n      exclusionListForGray.push(e[0]);\n    }\n    for (let e of grayLetters) {\n      if (exclusionListForGray.includes(e)) continue;\n      let j = word.indexOf(e);\n      if (j !== -1) {\n        ok = false;\n        break;\n      }\n    }\n    if (ok) {\n      updatedWordSpace.push(word);\n    }\n  }\n  wordSpace = updatedWordSpace;\n  P = 1 / wordSpace.length;\n}\nfunction getPattern(word1, word2) {\n  var pattern = [\"0\", \"0\", \"0\", \"0\", \"0\"]; // 0 -> gray; 1 -> yellow; 2 -> green\n\n  for (let i = 0; i < 5; i++) {\n    if (word1[i] === word2[i]) {\n      pattern[i] = '2';\n      word1[i] = 'X';\n      word2[i] = 'Y';\n    }\n  }\n  for (let i = 0; i < 5; i++) {\n    let c = word1[i];\n    let j = word2.indexOf(c);\n    if (j !== -1) {\n      pattern[i] = '1';\n      word2[j] = 'Y';\n    }\n  }\n  return pattern.join('');\n}\nfunction calcInfo() {\n  var wordInfoList = new maxHeap();\n  for (let mainWord of wordSpace) {\n    const patternList = {};\n    for (let matchWord of wordSpace) {\n      const pattern = getPattern(mainWord.split(''), matchWord.split(''));\n      if (patternList[pattern] === undefined) {\n        patternList[pattern] = 1;\n      } else {\n        patternList[pattern] += 1;\n      }\n    }\n    var entropy = 0;\n    for (let pattern in patternList) {\n      let matchingWords = patternList[pattern];\n      let p = matchingWords * P;\n      entropy += p * log2(1 / p);\n    }\n    const wordEntity = [];\n    wordEntity.push(entropy);\n    wordEntity.push(mainWord);\n    wordEntity.push(wordFreqData[mainWord]);\n    wordInfoList.push(wordEntity);\n  }\n  return wordInfoList;\n}\nconst wordleSolver = wordData => {\n  if (wordData.length === 0) {\n    //inital table -> 0th step\n    const wordInfoList = calcInfo();\n    const top10Words = [];\n    for (let i = 0; i < 10; i++) {\n      var wordEntity = wordInfoList.pop();\n\n      //swap 0 and 1 pos\n      let temp = wordEntity[0];\n      wordEntity[0] = wordEntity[1];\n      wordEntity[1] = temp;\n      top10Words.push(wordEntity);\n    }\n    return top10Words;\n  } else {\n    filterWordSpace(wordData);\n    const wordInfoList = calcInfo();\n    const infoListSize = wordInfoList.size();\n    const top10Words = [];\n    for (let i = 0; i < Math.min(10, infoListSize); i++) {\n      var wordEntity = wordInfoList.pop();\n\n      //swap 0 and 1 pos\n      let temp = wordEntity[0];\n      wordEntity[0] = wordEntity[1];\n      wordEntity[1] = temp;\n      top10Words.push(wordEntity);\n    }\n    return top10Words;\n  }\n};\nexport default wordleSolver;","map":{"version":3,"names":["wordFreqData","maxHeap","wordSpace","P","word","push","log2","x","Math","filterWordSpace","wordData","greenLetters","grayLetters","yellowLetters","i","updatedWordSpace","ok","exclusionListForGray","gl","e","j","indexOf","includes","length","getPattern","word1","word2","pattern","c","join","calcInfo","wordInfoList","mainWord","patternList","matchWord","split","undefined","entropy","matchingWords","p","wordEntity","wordleSolver","top10Words","pop","temp","infoListSize","size","min"],"sources":["/home/janmenjaya/projects/wordle-solver/src/algo/wordleAlgo.js"],"sourcesContent":["import wordFreqData from '../assets/five_letter_possible_words.json'\nimport maxHeap from '../ds/maxheap';\n\nvar wordSpace = [];\nvar P = 0.00043308791684711995\n\nfor (const word in wordFreqData) {\n  wordSpace.push(word)\n}\n\nfunction log2(x){\n  return Math.log2(x);\n}\n\nfunction filterWordSpace(wordData){\n  const greenLetters = [];\n  const grayLetters = [];\n  const yellowLetters = [];\n\n  for(let i=0;i<5;i++){\n    if(wordData[i][0]==='green'){\n      greenLetters.push([wordData[i][1],i]);\n    }\n    else if(wordData[i][0]==='gray'){\n      grayLetters.push(wordData[i][1])\n    }\n    else{\n      yellowLetters.push([wordData[i][1],i]);\n    }\n  }\n\n\n  var updatedWordSpace = []\n  for(let word of wordSpace){\n    var ok = true;\n    var exclusionListForGray = []\n\n    for(let gl of greenLetters){\n      if(word[gl[1]]!==gl[0]){\n        ok=false; break;\n      }\n      exclusionListForGray.push(gl[0])\n    }\n\n    \n\n    for(let e of yellowLetters){\n      let j = word.indexOf(e[0]);\n\n      if(j===-1){\n        ok=false; break;\n      }\n\n      if(j===e[1]){\n        ok=false; break;\n      }\n\n      exclusionListForGray.push(e[0])\n    }\n\n\n    for(let e of grayLetters){\n      if(exclusionListForGray.includes(e)) continue;\n      \n      let j = word.indexOf(e);\n\n      if(j!==-1){\n        ok=false; break;\n      }\n    }\n\n\n    if(ok){\n      updatedWordSpace.push(word);\n    }\n  }\n\n  wordSpace = updatedWordSpace;\n  P = 1/wordSpace.length;\n}\n\nfunction getPattern(word1, word2) {\n  var pattern = [\"0\", \"0\", \"0\", \"0\", \"0\"]; // 0 -> gray; 1 -> yellow; 2 -> green\n\n  for (let i = 0; i < 5; i++) {\n    if (word1[i] === word2[i]) {\n      pattern[i] = '2';\n      word1[i] = 'X';\n      word2[i] = 'Y';\n    }\n  }\n\n  for (let i = 0; i < 5; i++) {\n    let c = word1[i];\n\n    let j = word2.indexOf(c);\n    if (j !== -1) {\n      pattern[i] = '1';\n      word2[j] = 'Y';\n    }\n  }\n\n  return pattern.join('');\n}\n\n\n\nfunction calcInfo(){\n  var wordInfoList = new maxHeap();\n\n  for(let mainWord of wordSpace){\n    const patternList = {};\n\n    for(let matchWord of wordSpace){\n      const pattern = getPattern(mainWord.split(''), matchWord.split(''));\n\n      if(patternList[pattern]===undefined){\n        patternList[pattern] = 1;\n      }\n      else{\n        patternList[pattern] += 1;\n      }\n    }\n\n    var entropy = 0;\n    for(let pattern in patternList){\n      let matchingWords = patternList[pattern];\n      let p = matchingWords * P;\n      entropy += p * log2(1/p);\n    }\n\n    const wordEntity = [];\n    wordEntity.push(entropy);\n    wordEntity.push(mainWord);\n    wordEntity.push(wordFreqData[mainWord]);\n\n    wordInfoList.push(wordEntity);\n  }\n  return wordInfoList;\n}\n\n\n\nconst wordleSolver = (wordData) => {\n  if(wordData.length === 0){\n    //inital table -> 0th step\n    const wordInfoList = calcInfo();\n\n    const top10Words = [];\n    for(let i=0;i<10;i++){\n      var wordEntity = wordInfoList.pop();\n\n      //swap 0 and 1 pos\n      let temp = wordEntity[0];\n      wordEntity[0] = wordEntity[1];\n      wordEntity[1] = temp;\n\n      top10Words.push(wordEntity);\n    }\n\n    return top10Words;\n  }\n  else{\n    filterWordSpace(wordData);\n\n    const wordInfoList = calcInfo();\n    const infoListSize = wordInfoList.size();\n\n    const top10Words = [];\n    for(let i=0;i<Math.min(10,infoListSize);i++){\n      var wordEntity = wordInfoList.pop();\n\n      //swap 0 and 1 pos\n      let temp = wordEntity[0];\n      wordEntity[0] = wordEntity[1];\n      wordEntity[1] = temp;\n\n      top10Words.push(wordEntity);\n    }\n\n    return top10Words;\n  }\n}\n\nexport default wordleSolver;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}