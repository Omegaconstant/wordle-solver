{"ast":null,"code":"var _jsxFileName = \"/home/janmenjaya/projects/wordle-solver/src/components/letterGrid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createInitialGrid = (rows, cols) => {\n  const grid = [];\n  for (let i = 0; i < rows; i++) {\n    const row = [];\n    for (let j = 0; j < cols; j++) {\n      row.push(['gray', '']);\n    }\n    grid.push(row);\n  }\n  return grid;\n};\nconst LetterGrid = ({\n  handleWordData\n}) => {\n  _s();\n  const rows = 6;\n  const cols = 5;\n  const [grid, setGrid] = useState(createInitialGrid(rows, cols));\n  const inputRefs = useRef([]);\n  const handleInputChange = (rowIndex, colIndex, event) => {\n    const {\n      value\n    } = event.target;\n    setGrid(prevGrid => {\n      const newGrid = [...prevGrid];\n      newGrid[rowIndex][colIndex][1] = value;\n\n      // Move focus to the next cell in the adjacent column\n      if (colIndex < cols - 1 && value !== '') {\n        inputRefs.current[rowIndex][colIndex + 1].focus();\n      }\n      return newGrid;\n    });\n  };\n  const handleKeyDown = (rowIndex, colIndex, event) => {\n    if (grid[rowIndex][colIndex][1] === '') return;\n    if (event.key === 'Enter') {\n      if (colIndex === cols - 1 && rowIndex < rows - 1) {\n        // If in the last column and not in the last row, move focus to the next row's first cell\n        inputRefs.current[rowIndex + 1][0].focus();\n      }\n      if (colIndex === cols - 1) {\n        const wordData = [];\n        for (let i = 0; i < cols; i++) {\n          if (grid[rowIndex][i][0] === 'green') {\n            if (rowIndex + 1 < rows) grid[rowIndex + 1][i] = grid[rowIndex][i];\n          }\n          wordData.push(grid[rowIndex][i]);\n        }\n        handleWordData(wordData);\n      }\n    }\n  };\n  const handleColorChange = (rowIndex, colIndex) => {\n    setGrid(prevGrid => {\n      const newGrid = [...prevGrid];\n      if (newGrid[rowIndex][colIndex][0] === 'gray') {\n        newGrid[rowIndex][colIndex][0] = 'yellow';\n      } else if (newGrid[rowIndex][colIndex][0] === 'yellow') {\n        newGrid[rowIndex][colIndex][0] = 'green';\n      } else if (newGrid[rowIndex][colIndex][0] === 'green') {\n        newGrid[rowIndex][colIndex][0] = 'gray';\n      }\n      return newGrid;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid grid-rows-6 gap-1 min-w-[17rem]\",\n    children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        maxLength: 1,\n        value: cell[1],\n        onChange: e => handleInputChange(rowIndex, colIndex, e),\n        onKeyDown: e => handleKeyDown(rowIndex, colIndex, e),\n        onClick: () => handleColorChange(rowIndex, colIndex),\n        ref: input => {\n          inputRefs.current[rowIndex] = inputRefs.current[rowIndex] || [];\n          inputRefs.current[rowIndex][colIndex] = input;\n        },\n        style: {\n          'backgroundColor': cell[0] === 'white' ? 'white' : cell[0] === 'gray' ? '#9CA3AF' : cell[0] === 'yellow' ? '#FDE047' : '#4ADE80',\n          'height': '3rem',\n          'width': '3rem',\n          'textAlign': 'center',\n          'borderWidth': '1px',\n          'borderColor': 'black',\n          'borderStyle': 'solid',\n          'borderRadius': '0.25rem',\n          'marginLeft': '0.150rem',\n          'marginRight': '0.150rem',\n          'textTransform': 'uppercase'\n        }\n        // className={`h-10 w-10 text-center border border-gray-900 bg-green-400 rounded mx-0.5`}\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(LetterGrid, \"JA5lMZPgGzv34jEVlz7AZU7Hx7w=\");\n_c = LetterGrid;\nexport default LetterGrid;\nvar _c;\n$RefreshReg$(_c, \"LetterGrid\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","createInitialGrid","rows","cols","grid","i","row","j","push","LetterGrid","handleWordData","_s","setGrid","inputRefs","handleInputChange","rowIndex","colIndex","event","value","target","prevGrid","newGrid","current","focus","handleKeyDown","key","wordData","handleColorChange","className","children","map","cell","type","maxLength","onChange","e","onKeyDown","onClick","ref","input","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/janmenjaya/projects/wordle-solver/src/components/letterGrid.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\n\nconst createInitialGrid = (rows, cols) => {\n  const grid = [];\n  for (let i = 0; i < rows; i++) {\n    const row = [];\n    for(let j=0;j<cols;j++){\n      row.push(['gray',''])\n    }\n    grid.push(row)\n  }\n  return grid;\n};\n\n\nconst LetterGrid = ({handleWordData}) => {\n  const rows = 6;\n  const cols = 5;\n\n  const [grid, setGrid] = useState(createInitialGrid(rows,cols));\n  const inputRefs = useRef([]);\n\n  \n  const handleInputChange = (rowIndex, colIndex, event) => {\n    const { value } = event.target;\n    setGrid(prevGrid => {\n      const newGrid = [...prevGrid];\n      newGrid[rowIndex][colIndex][1] = value;\n\n      // Move focus to the next cell in the adjacent column\n      if (colIndex < cols - 1 && value!=='') {\n        inputRefs.current[rowIndex][colIndex + 1].focus();\n      }\n\n      return newGrid;\n    });\n  };\n\n  const handleKeyDown = (rowIndex, colIndex, event) => {\n    if(grid[rowIndex][colIndex][1]==='') return;\n\n    if (event.key === 'Enter') {\n      if (colIndex === cols - 1 && rowIndex < rows - 1) {\n        // If in the last column and not in the last row, move focus to the next row's first cell\n        inputRefs.current[rowIndex + 1][0].focus();\n      }\n\n      if(colIndex===cols-1 ){\n        const wordData = []\n        for(let i=0;i<cols;i++){\n          if(grid[rowIndex][i][0]==='green'){\n            if(rowIndex+1<rows) grid[rowIndex+1][i]=grid[rowIndex][i];\n          }\n          wordData.push(grid[rowIndex][i]);\n        }\n\n        handleWordData(wordData);\n      }\n    }\n  };\n\n  \n\n  const handleColorChange = (rowIndex, colIndex) => {\n    setGrid(prevGrid => {\n      const newGrid = [...prevGrid];\n      \n      if(newGrid[rowIndex][colIndex][0]==='gray'){\n        newGrid[rowIndex][colIndex][0]='yellow';\n      }\n      else if(newGrid[rowIndex][colIndex][0]==='yellow'){\n        newGrid[rowIndex][colIndex][0]='green';\n      }\n      else if(newGrid[rowIndex][colIndex][0]==='green'){\n        newGrid[rowIndex][colIndex][0]='gray';\n      }\n      return newGrid; \n    });\n  }\n\n  return (\n    <div className=\"grid grid-rows-6 gap-1 min-w-[17rem]\">\n      {grid.map((row, rowIndex) => (\n        <div key={rowIndex} >\n          {row.map((cell, colIndex) => (\n            <input\n              key={colIndex}\n              type=\"text\"\n              maxLength={1}\n              value={cell[1]}\n              onChange={(e) => handleInputChange(rowIndex, colIndex, e)}\n              onKeyDown={(e) => handleKeyDown(rowIndex, colIndex, e)}\n              onClick={() => handleColorChange(rowIndex, colIndex)}\n              ref={(input) => {\n                inputRefs.current[rowIndex] = inputRefs.current[rowIndex] || [];\n                inputRefs.current[rowIndex][colIndex] = input;\n              }}\n              style={{\n                'backgroundColor':(cell[0]==='white') ? 'white' : (cell[0]==='gray') ? '#9CA3AF' : (cell[0]==='yellow') ? '#FDE047' : '#4ADE80',\n                'height': '3rem',\n                'width': '3rem',\n                'textAlign': 'center',\n                'borderWidth': '1px',\n                'borderColor': 'black',\n                'borderStyle': 'solid',\n                'borderRadius': '0.25rem',\n                'marginLeft': '0.150rem',\n                'marginRight': '0.150rem',\n                'textTransform': 'uppercase'\n              }}\n              // className={`h-10 w-10 text-center border border-gray-900 bg-green-400 rounded mx-0.5`}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default LetterGrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}